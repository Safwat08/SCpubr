[["_main.html", "SCpubr - Complete reference Chapter 1 Aim of the package Chapter 2 Installation guide 2.1 A section 2.2 Another section Chapter 3 Dataset Chapter 4 DimPlots 4.1 Example: modification process 4.2 Regular DimPlots 4.3 Highlighting cells 4.4 Splitting by a category Chapter 5 Footnotes and citations 5.1 Footnotes 5.2 Citations Chapter 6 Blocks 6.1 Equations 6.2 Theorems and proofs 6.3 Callout blocks Chapter 7 Sharing your book 7.1 Publishing 7.2 404 pages 7.3 Metadata for sharing References", " SCpubr - Complete reference Enrique Blanco Carmona 2022-02-12 Chapter 1 Aim of the package This package aims to provide a streamlined way of generating publication ready figures for known single-cell visualizations. As subjective as the term “aesthetically pleasant” can be, this a set of theme modifications implemented across different plot types. This package also serves as a personal project, with future prospects of growth. Chapter 2 Installation guide TBD 2.1 A section 2.2 Another section Chapter 3 Dataset Through this vignette, a dataset containing 10K raw cells is used, which can be downloaded here. The following code is used to generate a Seurat object ready for plotting. counts_path &lt;- &quot;path_to_count_matrix&quot; # Path count matrix. counts &lt;- Seurat::Read10X(counts_path) # Create Seurat object. sample &lt;- Seurat::CreateSeuratObject(counts = counts, project = &quot;10K_pbmc&quot;) # Compute percentage of mithochondrial RNA. sample &lt;- Seurat::PercentageFeatureSet(sample, pattern = &quot;^MT-&quot;, col.name = &quot;percent.mt&quot;) # Compute QC. mask1 &lt;- sample$nCount_RNA &gt;= 1000 mask2 &lt;- sample$nFeature_RNA &gt;= 500 mask3 &lt;- sample$percent.mt &lt;= 20 mask &lt;- mask1 &amp; mask2 &amp; mask3 sample &lt;- sample[, mask] # Normalize. sample &lt;- Seurat::SCTransform(sample) # Dimensional reduction. sample &lt;- Seurat::RunPCA(sample) sample &lt;- Seurat::RunUMAP(sample, dims = 1:30) # Find clusters. sample &lt;- Seurat::FindNeighbors(sample, dims = 1:30) sample &lt;- Seurat::FindClusters(sample, resolution = 0.2) Chapter 4 DimPlots 4.1 Example: modification process This function aims to enhance Seurat’s DimPlot() output. This is Seurat’s default output for DimPlot(). Seurat::DimPlot(sample) Figure 4.1: Default DimPlot. As it looks, there is nothing wrong, but there are quite some changes that one would like to implement. For instance, shuffling the cells so that there is no overlap of cells just due to the cluster names. Seurat::DimPlot(sample, shuffle = T) Figure 4.2: DimPlot with the cells shuffled. Furthermore, one would think about the need of the axes. If, by consensus, UMAPs are shown plotting the first UMAP component on the X axis and the second on the Y axis, then showing them becomes redundant, specially when one can not truly rely on the numbers shown by the scales. Seurat::DimPlot(sample, shuffle = T) + Seurat::NoAxes() Figure 4.3: DimPlot without axes. Right now, we can observe a couple of things. First, is that the dot size is rather small. Let’s set it to 0.5. Seurat::DimPlot(sample, shuffle = T, pt.size = 0.5) + Seurat::NoAxes() Figure 4.4: DimPlot with increased dot size. Still, the legend seems rather small. Let’s increase it’s font size and set it to bold so that it can better read. Seurat::DimPlot(sample, shuffle = T, pt.size = 0.5) + Seurat::NoAxes() + ggplot2::theme(legend.text = ggplot2::element_text(size = 16, face = &quot;bold&quot;), legend.title = ggplot2::element_text(size = 16, face = &quot;bold&quot;)) Figure 4.5: DimPlot with increased font size. We would also like to add a title to our plot, to best describe it. Seurat::DimPlot(sample, shuffle = T, pt.size = 0.5) + Seurat::NoAxes() + ggplot2::ggtitle(&quot;My awesome SC dataset&quot;) + ggplot2::theme(legend.text = ggplot2::element_text(size = 16, face = &quot;bold&quot;), legend.title = ggplot2::element_text(size = 16, face = &quot;bold&quot;)) Figure 4.6: DimPlot with title. And, naturally, we would like to increase the font size of the title and put it in bold and centered. Seurat::DimPlot(sample, shuffle = T, pt.size = 0.5) + Seurat::NoAxes() + ggplot2::ggtitle(&quot;My awesome SC dataset&quot;) + ggplot2::theme(plot.title = ggplot2::element_text(size = 20, face = &quot;bold&quot;, hjust = 0.5), legend.text = ggplot2::element_text(size = 16, face = &quot;bold&quot;), legend.title = ggplot2::element_text(size = 16, face = &quot;bold&quot;)) Figure 4.7: DimPlot with bigger and bold title. Now, we would like to modify the color palette. This palette has too bright colors, and we want something more toned down. num_clusters &lt;- length(unique(sample$seurat_clusters)) color_scale &lt;- colortools::setColors(&quot;#457b9d&quot;, num_clusters) names(color_scale) &lt;- sort(unique(sample$seurat_clusters)) Seurat::DimPlot(sample, shuffle = T, pt.size = 0.5, cols = color_scale) + Seurat::NoAxes() + ggplot2::ggtitle(&quot;My awesome SC dataset&quot;) + ggplot2::theme(plot.title = ggplot2::element_text(size = 20, face = &quot;bold&quot;, hjust = 0.5), legend.text = ggplot2::element_text(size = 16, face = &quot;bold&quot;), legend.title = ggplot2::element_text(size = 16, face = &quot;bold&quot;)) Figure 4.8: DimPlot with custom color scale. The legend on the right side seems off, what if we were to have long cluster names? It would inevitable take a lot of space from the actual plot. Let’s better put it on the bottom. num_clusters &lt;- length(unique(sample$seurat_clusters)) color_scale &lt;- colortools::setColors(&quot;#457b9d&quot;, num_clusters) names(color_scale) &lt;- sort(unique(sample$seurat_clusters)) Seurat::DimPlot(sample, shuffle = T, pt.size = 0.5, cols = color_scale) + ggpubr::theme_pubr(legend = &quot;bottom&quot;) + Seurat::NoAxes() + ggplot2::ggtitle(&quot;My awesome SC dataset&quot;) + ggplot2::theme(plot.title = ggplot2::element_text(size = 20, face = &quot;bold&quot;, hjust = 0.5), legend.text = ggplot2::element_text(size = 16, face = &quot;bold&quot;), legend.title = ggplot2::element_text(size = 16, face = &quot;bold&quot;)) Figure 4.9: DimPlot with legend at the bottom. Still, there are too many columns in the legend. Let’s rearrange it into four columns. num_clusters &lt;- length(unique(sample$seurat_clusters)) color_scale &lt;- colortools::setColors(&quot;#457b9d&quot;, num_clusters) names(color_scale) &lt;- sort(unique(sample$seurat_clusters)) Seurat::DimPlot(sample, shuffle = T, pt.size = 0.5, cols = color_scale) + ggpubr::theme_pubr(legend = &quot;bottom&quot;) + Seurat::NoAxes() + ggplot2::ggtitle(&quot;My awesome SC dataset&quot;) + ggplot2::theme(plot.title = ggplot2::element_text(size = 20, face = &quot;bold&quot;, hjust = 0.5), legend.text = ggplot2::element_text(size = 16, face = &quot;bold&quot;), legend.title = ggplot2::element_text(size = 16, face = &quot;bold&quot;)) + ggplot2::guides(color = ggplot2::guide_legend(ncol = 4, byrow = F)) Figure 4.10: DimPlot with legend at the bottom in four columns. But now the legend icon sizes are too small! We have to fix this. num_clusters &lt;- length(unique(sample$seurat_clusters)) color_scale &lt;- colortools::setColors(&quot;#457b9d&quot;, num_clusters) names(color_scale) &lt;- sort(unique(sample$seurat_clusters)) Seurat::DimPlot(sample, shuffle = T, pt.size = 0.5, cols = color_scale) + ggpubr::theme_pubr(legend = &quot;bottom&quot;) + Seurat::NoAxes() + ggplot2::ggtitle(&quot;My awesome SC dataset&quot;) + ggplot2::theme(plot.title = ggplot2::element_text(size = 20, face = &quot;bold&quot;, hjust = 0.5), legend.text = ggplot2::element_text(size = 16, face = &quot;bold&quot;), legend.title = ggplot2::element_text(size = 16, face = &quot;bold&quot;)) + ggplot2::guides(color = ggplot2::guide_legend(ncol = 4, byrow = F, override.aes = list(size = 4))) Figure 4.11: DimPlot with legend at the bottom in four columns. As of now, this plot looks much better and polished than the default counterpart. This, is the setting ground for SCpubr::do_DimPlot(). 4.2 Regular DimPlots This is the default output from SCpubr::do_DimPlot(). SCpubr::do_DimPlot(sample) Figure 4.12: SCpubr DimPlot. We can add a title with the plot.title parameter. SCpubr::do_DimPlot(sample, plot.title = &quot;My awesome SC data set&quot;) Figure 4.13: SCpubr DimPlot with title. We can change the legend location and number of columns with legend.position and legend.ncol. SCpubr::do_DimPlot(sample, plot.title = &quot;My awesome SC data set&quot;, legend.position = &quot;left&quot;, legend.ncol = 4) Figure 4.14: SCpubr DimPlot with legend to the left. 4.3 Highlighting cells One of the nice features of Seurat::DimPlot() is the possibility of highlighting a certain group of cells in the DimPlot. This is achieved by using the cells.highligh parameter. This is how the default plot looks like. # Select 1000 random cells out of clusters 1, 5 and 7. cells.use &lt;- sample(colnames(sample[, sample$seurat_clusters %in% c(&quot;1&quot;, &quot;5&quot;, &quot;7&quot;)]), 1000) Seurat::DimPlot(sample, cells.highlight = cells.use) Figure 4.15: Seurat DimPlot highlighting cells. This is how SCpubr returns this plot. For this, the same parameter has to be set up. # Select 1000 random cells out of clusters 1, 5 and 7. cells.use &lt;- sample(colnames(sample[, sample$seurat_clusters %in% c(&quot;1&quot;, &quot;5&quot;, &quot;7&quot;)]), 1000) SCpubr::do_DimPlot(sample, cells.highlight = cells.use) Figure 4.16: SCpubr DimPlot highlighting cells. By default, the size of all cells in SCpubr::do_DimPlot() is the same. However, the size of the highlighted dots can be modified with the parameter sizes.highlight from Seurat. # Select 1000 random cells out of clusters 1, 5 and 7. cells.use &lt;- sample(colnames(sample[, sample$seurat_clusters %in% c(&quot;1&quot;, &quot;5&quot;, &quot;7&quot;)]), 1000) SCpubr::do_DimPlot(sample, cells.highlight = cells.use, sizes.highlight = 2) Figure 4.17: SCpubr DimPlot highlighting cells bigger dot size. 4.4 Splitting by a category Another useful paramter of Seurat::DimPlot is split.by, which allows you to split your DimPlot into multiple panels, each one containing a different unique value of the metadata variable you have provided to the argument. One can understand this as using the group.by parameter and then splitting the resulting DimPlot into different panels. In this example, we are going to use the different clusters as an example This is how it looks by default: # Using ncol = 5 to maintain some of the proportions. Seurat::DimPlot(sample, split.by = &quot;seurat_clusters&quot;, ncol = 5) Figure 4.18: Seurat DimPlot using split.by. As can be observed, this plots accomplish the task of separating the cells into each panel, but the approach followed actually makes interpretation difficult. Clusters such as Cluster 9, with fewer cells, tell pretty much nothing. Not knowing how the original UMAP looked like is a major downside of this approach. This is where SCpubr focus. Instead of using Seurat’s split.by parameter, it generates as many plots as unique values in the metadata to split the plot by, but uses cells.highlight instead, which keeps the rest of cells greyed out. This is how it looks: # Using ncol = 5 to maintain some of the proportions. # Using legend = F to remove unwanted repeated legends. SCpubr::do_DimPlot(sample, split.by = &quot;seurat_clusters&quot;, ncol = 5, legend = F) Figure 4.19: SCpubr DimPlot using split.by. This way, we can see that clusters such as Cluster 7 are way more disperse than the rest, accounting not only for standalone groups of cells but also blending in other bigger clusters. Actually, the user might want to change the color of the highlighted cells in this split DimPlot. This is achieved by using colors.split parameter and providing either a color name recognized by ggplot2 or (recommended) a HEX code. # Using ncol = 5 to maintain some of the proportions. # Using legend = F to remove unwanted repeated legends. SCpubr::do_DimPlot(sample, split.by = &quot;seurat_clusters&quot;, ncol = 5, legend = F, colors.split = &quot;black&quot;) Figure 4.20: SCpubr DimPlot using split.by with a changed color Furthermore, one might also want to color each cluster by the original color. This can be achieved by using the argument colorss.split, either providing a named vector of each cluster (or metadata variable unique value) as names and color hex codes as values or TRUE, thus resorting to the default SCpubr categorical coloring. # Using ncol = 5 to maintain some of the proportions. # Using legend = F to remove unwanted repeated legends. SCpubr::do_DimPlot(sample, split.by = &quot;seurat_clusters&quot;, ncol = 5, legend = F, colors.split = TRUE) Figure 4.21: SCpubr DimPlot using split.by with default SCpubr colors Chapter 5 Footnotes and citations 5.1 Footnotes Footnotes are put inside the square brackets after a caret ^[]. Like this one.1 5.2 Citations Reference items in your bibliography file(s) using @key. For example, we are using the bookdown package (Xie 2021) (check out the last code chunk in index.Rmd to see how this citation key was added) in this sample book, which was built on top of R Markdown and knitr (Xie 2015) (this citation was added manually in an external file book.bib). Note that the .bib files need to be listed in the index.Rmd with the YAML bibliography key. The RStudio Visual Markdown Editor can also make it easier to insert citations: https://rstudio.github.io/visual-markdown-editing/#/citations Chapter 6 Blocks 6.1 Equations Here is an equation. \\[\\begin{equation} f\\left(k\\right) = \\binom{n}{k} p^k\\left(1-p\\right)^{n-k} \\tag{6.1} \\end{equation}\\] You may refer to using \\@ref(eq:binom), like see Equation (6.1). 6.2 Theorems and proofs Labeled theorems can be referenced in text using \\@ref(thm:tri), for example, check out this smart theorem 6.1. Theorem 6.1 For a right triangle, if \\(c\\) denotes the length of the hypotenuse and \\(a\\) and \\(b\\) denote the lengths of the other two sides, we have \\[a^2 + b^2 = c^2\\] Read more here https://bookdown.org/yihui/bookdown/markdown-extensions-by-bookdown.html. 6.3 Callout blocks The R Markdown Cookbook provides more help on how to use custom blocks to design your own callouts: https://bookdown.org/yihui/rmarkdown-cookbook/custom-blocks.html Chapter 7 Sharing your book 7.1 Publishing HTML books can be published online, see: https://bookdown.org/yihui/bookdown/publishing.html 7.2 404 pages By default, users will be directed to a 404 page if they try to access a webpage that cannot be found. If you’d like to customize your 404 page instead of using the default, you may add either a _404.Rmd or _404.md file to your project root and use code and/or Markdown syntax. 7.3 Metadata for sharing Bookdown HTML books will provide HTML metadata for social sharing on platforms like Twitter, Facebook, and LinkedIn, using information you provide in the index.Rmd YAML. To setup, set the url for your book and the path to your cover-image file. Your book’s title and description are also used. This gitbook uses the same social sharing data across all chapters in your book- all links shared will look the same. Specify your book’s source repository on GitHub using the edit key under the configuration options in the _output.yml file, which allows users to suggest an edit by linking to a chapter’s source file. Read more about the features of this output format here: https://pkgs.rstudio.com/bookdown/reference/gitbook.html Or use: ?bookdown::gitbook References "]]
