% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/do_PseudotimePlot.R
\name{do_PseudotimePlot}
\alias{do_PseudotimePlot}
\title{Compute Pseudotime analysis plots.}
\usage{
do_PseudotimePlot(
  sample,
  cds,
  pseudotime_genes,
  group.by = NULL,
  compute_monocle_partitions = TRUE,
  compute_monocle_clusters = FALSE,
  trajectory_graph_color = "black",
  trajectory_graph_segment_size = 1,
  is_max_score_the_start = TRUE,
  label_roots = FALSE,
  label_branches = FALSE,
  label_leaves = FALSE,
  pt.size = 1,
  border.size = 1.5,
  legend.position = "bottom",
  legend.type = "colorbar",
  font.size = 14,
  font.type = "sans",
  legend.length = 20,
  legend.width = 1,
  legend.framewidth = 1.5,
  legend.tickwidth = 1.5,
  legend.framecolor = "grey50",
  legend.tickcolor = "white",
  viridis_color_map = "D",
  plot_cell_borders = TRUE,
  enforce_symmetry = FALSE,
  nbin = 24,
  ctrl = 100
)
}
\arguments{
\item{sample}{Seurat object.}

\item{cds}{Cell Data Set of the same seurat object. Can be obtained using \code{SeuratWrappers::as.cell_data_set(sample)}.}

\item{pseudotime_genes}{Character. List of genes that will be used to compute enrichment scores, that will be used for pseudotime.}

\item{group.by}{Character. Metadata variable to use as grouping if monocle3 clusters are not computed.}

\item{compute_monocle_partitions}{Logical. Whether to tell monocle3 to compute different partitions. FALSE will treat all the UMAP as a single partition.}

\item{compute_monocle_clusters}{Logical. Whether to make monocle3 to re-compute clustering}

\item{trajectory_graph_color}{Character. Color of the trajectory graph plotted on top of the UMAP.}

\item{trajectory_graph_segment_size}{Integer. Size of the trajectory graph.}

\item{is_max_score_the_start}{Logical. Do the cells with the highest enrichment scores depict the beginning of the trajectory (TRUE) or the end (FALSE)?}

\item{label_roots, label_branches, label_leaves}{Logical. Label roots, branches or leaves in the trajectory graph.}

\item{pt.size}{Numeric. Point size for the plots.}

\item{border.size}{Numeric. Point size for the border of the cells in the plots.}

\item{legend.position}{Position of the legend in the plot. Will only work if legend is set to TRUE.}

\item{legend.type}{Character. Type of legend to display. One of: normal, colorbar, colorsteps.}

\item{font.size}{Numeric. Overall fontsize for the plots.}

\item{font.type}{Character. Base font for the plot. One of mono, serif or sans.}

\item{legend.length, legend.width}{Length and width of the legend. Will adjust automatically depending on legend side.}

\item{legend.framewidth, legend.tickwidth}{Numeric. Width of the lines of the box in the legend.}

\item{legend.framecolor, legend.tickcolor}{Numeric. Color of the lines of the box in the legend.}

\item{viridis_color_map}{Character. Viridis color map to use in the FeaturePlot for the enrichment scores.}

\item{plot_cell_borders}{Logical. Whether to plot borders around the cells.}

\item{enforce_symmetry}{Logical. Whethter to plot enrichment as a symmetrical scale.}

\item{nbin}{Numeric. Number of bins to use while computing enrichment scores.}

\item{ctrl}{Numeric. Number of control genes per bin while computing enrichment scores.}
}
\value{
A list containing a collection of ggplot2 objects.
}
\description{
Compute Pseudotime analysis plots.
}
\examples{
\dontrun{
  # Genes to use.
  pseudotime_genes <- c("CD14", "LYN")

  # Define your sample.
  # sample <- your_seurat_object
  # Transform into CDS.
  # cds <- SeuratWrappers::as.cell_data_set(sample)

  # Compute monocle clusters and partitions.
  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = TRUE,
                                   compute_monocle_clusters = TRUE,
                                   pseudotime_genes = pseudotime_genes)

  # Compute monocle clusters and keep a single partition.
  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = FALSE,
                                   compute_monocle_clusters = TRUE,
                                   pseudotime_genes = pseudotime_genes)

  # Compute monocle partitions but keep original identities as clusters.
  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = TRUE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes)

  # Keep original identities as clusters and a single partition.
  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = FALSE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes)

  # Set a metadata varible as clusters and a single partition.
  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = FALSE,
                                   compute_monocle_clusters = FALSE,
                                   group.by = "orig.ident")


  # Compute trajectory graph.
  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = TRUE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes)
  # Retrieve trajectory groups.
  p1 <- out$trajectory_groups
  # Retrieve trajectory partitions.
  p2 <- out$trajectory_partitions

  p <- p1 | p2
  p

  # Change trajectory graph width.
  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = TRUE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes,
                                   trajectory_graph_segment_size = 1)
  p1 <- out$trajectory_partitions

  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = TRUE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes,
                                   trajectory_graph_segment_size = 2)
  p2 <- out$trajectory_partitions

  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = TRUE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes,
                                   trajectory_graph_segment_size = 3)
  p3 <- out$trajectory_partitions


  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = TRUE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes,
                                   trajectory_graph_segment_size = 3,
                                   trajectory_graph_color = "white")
  p4 <- out$trajectory_partitions

  p <- (p1 | p2) / (p3 | p4)
  p

  # Add nodes, branches and leaves to the trajectory graph.
  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = TRUE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes,
                                   trajectory_graph_segment_size = 2,
                                   label_roots = TRUE)
  p1 <- out$trajectory_partitions

  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = TRUE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes,
                                   trajectory_graph_segment_size = 2,
                                   label_roots = TRUE,
                                   label_branches = TRUE)
  p2 <- out$trajectory_partitions


  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = TRUE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes,
                                   trajectory_graph_segment_size = 2,
                                   label_roots = TRUE,
                                   label_branches = TRUE,
                                   label_leaves = TRUE)
  p3 <- out$trajectory_partitions

  p <- p1 | p2 | p3
  p

  # Plot pseudotime with monocle partitions using highest score as root.
  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = TRUE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes,
                                   is_max_score_the_start = TRUE)
  p1 <- out$pseudotime

  # Plot pseudotime with monocle partitions using lowest score as root.
  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = TRUE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes,
                                   is_max_score_the_start = FALSE)
  p2 <- out$pseudotime


  # Plot pseudotime with monocle partitions using highest score as root.
  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = FALSE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes,
                                   is_max_score_the_start = TRUE)
  p3 <- out$pseudotime

  # Plot pseudotime with monocle partitions using lowest score as root.
  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = FALSE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes,
                                   is_max_score_the_start = FALSE)
  p4 <- out$pseudotime

  p <- (p1 | p2) / (p3 | p4)
  p

  # Plot pseudotime with monocle partitions using highest score as root.
  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = TRUE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes,
                                   symmetrical_scale = FALSE,
                                   is_max_score_the_start = TRUE)
  p1 <- out$pseudotime
  p3 <- out$enrichment
  # Plot pseudotime with monocle partitions using lowest score as root.
  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = TRUE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes,
                                   symmetrical_scale = TRUE,
                                   is_max_score_the_start = FALSE)
  p2 <- out$pseudotime
  p4 <- out$enrichment

  p <- (p1 | p2) / (p3 | p4)
  p
}
}
