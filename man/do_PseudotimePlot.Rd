% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/do_PseudotimePlot.R
\name{do_PseudotimePlot}
\alias{do_PseudotimePlot}
\title{Compute Pseudotime analysis plots.}
\usage{
do_PseudotimePlot(
  sample,
  cds,
  pseudotime_genes,
  group.by = NULL,
  compute_monocle_partitions = TRUE,
  compute_monocle_clusters = FALSE,
  trajectory_graph_color = "black",
  trajectory_graph_segment_size = 1,
  is_max_score_the_start = TRUE,
  label_roots = FALSE,
  label_branches = FALSE,
  label_leaves = FALSE,
  pt.size = 1,
  border.size = 1.5,
  legend.position = "bottom",
  legend.type = "colorbar",
  font.size = 14,
  font.type = "sans",
  legend.length = 20,
  legend.width = 1,
  legend.framewidth = 1.5,
  legend.tickwidth = 1.5,
  legend.framecolor = "grey50",
  legend.tickcolor = "white",
  viridis_color_map = "D",
  viridis_direction = 1,
  plot_cell_borders = TRUE,
  enforce_symmetry = FALSE,
  nbin = 24,
  ctrl = 100
)
}
\arguments{
\item{sample}{\strong{\code{\link[SeuratObject]{Seurat}}} | A Seurat object, generated by \link[Seurat]{CreateSeuratObject}.}

\item{cds}{\strong{\code{\link[monocle3]{cell_data_set}}} | Cell Data Set of the same seurat object. Can be obtained using \code{SeuratWrappers::as.cell_data_set(sample)}.}

\item{pseudotime_genes}{\strong{\code{\link[base]{character}}} | List of genes that will be used to compute enrichment scores, that will be used for pseudotime.}

\item{group.by}{\strong{\code{\link[base]{character}}} | Metadata variable to use as grouping if monocle3 clusters are not computed.}

\item{compute_monocle_partitions}{\strong{\code{\link[base]{logical}}} | Whether to tell monocle3 to compute different partitions. FALSE will treat all the UMAP as a single partition.}

\item{compute_monocle_clusters}{\strong{\code{\link[base]{logical}}} | Whether to make monocle3 to re-compute clustering}

\item{trajectory_graph_color}{\strong{\code{\link[base]{character}}} | Color of the trajectory graph plotted on top of the UMAP.}

\item{trajectory_graph_segment_size}{\strong{\code{\link[base]{numeric}}} | Size of the trajectory graph.}

\item{is_max_score_the_start}{\strong{\code{\link[base]{logical}}} | Do the cells with the highest enrichment scores depict the beginning of the trajectory (TRUE) or the end (FALSE)?}

\item{label_roots, label_branches, label_leaves}{\strong{\code{\link[base]{logical}}} | Label roots, branches or leaves in the trajectory graph.}

\item{pt.size}{\strong{\code{\link[base]{numeric}}} | Size of the dots.}

\item{border.size}{\strong{\code{\link[base]{numeric}}} | Width of the border of the cells.}

\item{legend.position}{\strong{\code{\link[base]{character}}} | Position of the legend in the plot. One of:
\itemize{
\item \emph{\code{top}}: Top of the figure.
\item \emph{\code{bottom}}: Bottom of the figure.
\item \emph{\code{left}}: Left of the figure.
\item \emph{\code{right}}: Right of the figure.
\item \emph{\code{none}}: No legend is displayed.
}}

\item{legend.type}{\strong{\code{\link[base]{character}}} | Type of legend to display. One of:
\itemize{
\item \emph{\code{normal}}: Default legend displayed by \pkg{ggplot2}.
\item \emph{\code{colorbar}}: Redefined colorbar legend, using \link[ggplot2]{guide_colorbar}.
\item \emph{\code{colorsteps}}: Redefined legend with colors going by range, in steps, using \link[ggplot2]{guide_colorsteps}.
}}

\item{font.size}{\strong{\code{\link[base]{numeric}}} | Overall font size of the plot. All plot elements will have a size relationship with this font size.}

\item{font.type}{\strong{\code{\link[base]{character}}} | Base font family for the plot. One of:
\itemize{
\item \emph{\code{mono}}: Mono spaced font.
\item \emph{\code{serif}}: Serif font family.
\item \emph{\code{sans}}: Default font family.
}}

\item{legend.length, legend.width}{\strong{\code{\link[base]{numeric}}} | Length and width of the legend. Will adjust automatically depending on legend side.}

\item{legend.framewidth, legend.tickwidth}{\strong{\code{\link[base]{numeric}}} | Width of the lines of the box in the legend.}

\item{legend.framecolor, legend.tickcolor}{\strong{\code{\link[base]{character}}} | Color of the lines of the box in the legend.}

\item{viridis_color_map}{\strong{\code{\link[base]{character}}} | A capital letter from A to H or the scale name as in \link[viridis]{scale_fill_viridis}.}

\item{viridis_direction}{\strong{\code{\link[base]{numeric}}} | Either 1 or -1. Controls how the gradient of viridis scale is formed.}

\item{plot_cell_borders}{\strong{\code{\link[base]{logical}}} | Whether to plot border around cells.}

\item{enforce_symmetry}{\strong{\code{\link[base]{logical}}} | Return a symmetrical plot axes-wise or continuous color scale-wise, when applicable.}

\item{nbin}{\strong{\code{\link[base]{numeric}}} | Number of bins to use while computing enrichment scores.}

\item{ctrl}{\strong{\code{\link[base]{numeric}}} | Number of control genes per bin while computing enrichment scores.}
}
\value{
A list containing a collection of ggplot2 objects.
}
\description{
Compute Pseudotime analysis plots.
}
\examples{
\dontrun{
  # Genes to use.
  pseudotime_genes <- c("CD14", "LYN")

  # Define your sample.
  # sample <- your_seurat_object
  # Transform into CDS.
  # cds <- SeuratWrappers::as.cell_data_set(sample)

  # Compute monocle clusters and partitions.
  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = TRUE,
                                   compute_monocle_clusters = TRUE,
                                   pseudotime_genes = pseudotime_genes)

  # Compute monocle clusters and keep a single partition.
  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = FALSE,
                                   compute_monocle_clusters = TRUE,
                                   pseudotime_genes = pseudotime_genes)

  # Compute monocle partitions but keep original identities as clusters.
  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = TRUE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes)

  # Keep original identities as clusters and a single partition.
  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = FALSE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes)

  # Set a metadata varible as clusters and a single partition.
  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = FALSE,
                                   compute_monocle_clusters = FALSE,
                                   group.by = "orig.ident")


  # Compute trajectory graph.
  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = TRUE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes)
  # Retrieve trajectory groups.
  p1 <- out$trajectory_groups
  # Retrieve trajectory partitions.
  p2 <- out$trajectory_partitions

  p <- p1 | p2
  p

  # Change trajectory graph width.
  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = TRUE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes,
                                   trajectory_graph_segment_size = 1)
  p1 <- out$trajectory_partitions

  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = TRUE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes,
                                   trajectory_graph_segment_size = 2)
  p2 <- out$trajectory_partitions

  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = TRUE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes,
                                   trajectory_graph_segment_size = 3)
  p3 <- out$trajectory_partitions


  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = TRUE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes,
                                   trajectory_graph_segment_size = 3,
                                   trajectory_graph_color = "white")
  p4 <- out$trajectory_partitions

  p <- (p1 | p2) / (p3 | p4)
  p

  # Add nodes, branches and leaves to the trajectory graph.
  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = TRUE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes,
                                   trajectory_graph_segment_size = 2,
                                   label_roots = TRUE)
  p1 <- out$trajectory_partitions

  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = TRUE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes,
                                   trajectory_graph_segment_size = 2,
                                   label_roots = TRUE,
                                   label_branches = TRUE)
  p2 <- out$trajectory_partitions


  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = TRUE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes,
                                   trajectory_graph_segment_size = 2,
                                   label_roots = TRUE,
                                   label_branches = TRUE,
                                   label_leaves = TRUE)
  p3 <- out$trajectory_partitions

  p <- p1 | p2 | p3
  p

  # Plot pseudotime with monocle partitions using highest score as root.
  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = TRUE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes,
                                   is_max_score_the_start = TRUE)
  p1 <- out$pseudotime

  # Plot pseudotime with monocle partitions using lowest score as root.
  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = TRUE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes,
                                   is_max_score_the_start = FALSE)
  p2 <- out$pseudotime


  # Plot pseudotime with monocle partitions using highest score as root.
  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = FALSE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes,
                                   is_max_score_the_start = TRUE)
  p3 <- out$pseudotime

  # Plot pseudotime with monocle partitions using lowest score as root.
  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = FALSE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes,
                                   is_max_score_the_start = FALSE)
  p4 <- out$pseudotime

  p <- (p1 | p2) / (p3 | p4)
  p

  # Plot pseudotime with monocle partitions using highest score as root.
  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = TRUE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes,
                                   symmetrical_scale = FALSE,
                                   is_max_score_the_start = TRUE)
  p1 <- out$pseudotime
  p3 <- out$enrichment
  # Plot pseudotime with monocle partitions using lowest score as root.
  out <- SCpubr::do_PseudotimePlot(sample = sample,
                                   cds = cds,
                                   compute_monocle_partitions = TRUE,
                                   compute_monocle_clusters = FALSE,
                                   pseudotime_genes = pseudotime_genes,
                                   symmetrical_scale = TRUE,
                                   is_max_score_the_start = FALSE)
  p2 <- out$pseudotime
  p4 <- out$enrichment

  p <- (p1 | p2) / (p3 | p4)
  p
}
}
