% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/do_ColorPalette.R
\name{do_ColorPalette}
\alias{do_ColorPalette}
\title{Generate color scales based on a value.}
\usage{
do_ColorPalette(
  colors.use,
  n = 12,
  opposite = FALSE,
  adjacent = FALSE,
  triadic = FALSE,
  split_complementary = FALSE,
  tetradic = FALSE,
  square = FALSE,
  complete_output = FALSE,
  plot = FALSE,
  font.size = 14,
  font.type = "sans"
)
}
\arguments{
\item{colors.use}{One color upon which generate the color scale. Can be a name or a HEX code.}

\item{n}{Numeric. Number of colors to include in the color wheel. Use it when all other options are FALSE, otherwise, it becomes 12.}

\item{opposite}{Logical. Return the opposing color to the one provided.}

\item{adjacent}{Logical. Return the adjacent colors to the one provided.}

\item{triadic}{Logical. Return the triadic combination of colors to the one provided.}

\item{split_complementary}{Logical. Return the split complementary combination of colors to the one provided.}

\item{tetradic}{Logical. Return the tetradic combination of colors to the one provided.}

\item{square}{Logical. Return the square combination of colors to the one provided.}

\item{complete_output}{Logical. Runs all the previous options and returns all the outputs as a list that contains all color vectors, all plots and a combined plot with everything.}

\item{plot}{Logical. Whether to also return a plot displaying the values instead of a vector with the color.}

\item{font.size}{Base font.size of the plot.}

\item{font.type}{Character. Base font for the plot. One of mono, serif or sans.}
}
\value{
A character vector with the desired color scale.

A ggplot2 object containing a Dot Plot.
}
\description{
This function is an adaptation of colortools package. As the package was removed from CRAN on 23-06-2022, this utility function came to existence in order to cover the gap. It is, on its basis,
an adaptation of the package into a single function. Original code, developed by Gaston Sanchez, can be found in: \url{https://github.com/gastonstat/colortools}
}
\examples{
\dontrun{
  # Generate a color wheel based on a single value.
  colors <- SCpubr::do_ColorPalette(colors.use = "steelblue")
  p <- SCpubr::do_ColorPalette(colors.use = "steelblue",
                               plot = TRUE)

  # Generate a pair of opposite colors based on a given one.
  colors <- SCpubr::do_ColorPalette(colors.use = "steelblue",
                                    opposite = TRUE)
  p <- SCpubr::do_ColorPalette(colors.use = "steelblue",
                               opposite = TRUE,
                               plot = TRUE)

  # Generate a trio of adjacent colors based on a given one.
  colors <- SCpubr::do_ColorPalette(colors.use = "steelblue",
                                    adjacent = TRUE)
  p <- SCpubr::do_ColorPalette(colors.use = "steelblue",
                               adjacent = TRUE,
                               plot = TRUE)

  # Generate a trio of triadic colors based on a given one.
  colors <- SCpubr::do_ColorPalette(colors.use = "steelblue",
                                    triadic = TRUE)
  p <- SCpubr::do_ColorPalette(colors.use = "steelblue",
                               triadic = TRUE,
                               plot = TRUE)

  # Generate a trio of split complementary colors based on a given one.
  colors <- SCpubr::do_ColorPalette(colors.use = "steelblue",
                                    split_complementary = TRUE)
  p <- SCpubr::do_ColorPalette(colors.use = "steelblue",
                               split_complementary = TRUE,
                               plot = TRUE)

  # Generate a group of tetradic colors based on a given one.
  colors <- SCpubr::do_ColorPalette(colors.use = "steelblue",
                                    tetradic = TRUE)
  p <- SCpubr::do_ColorPalette(colors.use = "steelblue",
                               tetradic = TRUE,
                               plot = TRUE)

  # Generate a group of square colors based on a given one.
  colors <- SCpubr::do_ColorPalette(colors.use = "steelblue",
                                    square = TRUE)
  p <- SCpubr::do_ColorPalette(colors.use = "steelblue",
                               square = TRUE,
                               plot = TRUE)

  # Retrieve the output of all options.
  out <- SCpubr::do_ColorPalette(colors.use = "steelblue",
                                 complete_output = TRUE)
  ## Retrieve the colors.
  colors <- out$colors
  ## Retrieve the plots.
  plots <- out$plots
  ## Retrieve a combined plot with all the options.
  p <- out$combined_plot
}
}
