% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/do_RidgePlot.R
\name{do_RidgePlot}
\alias{do_RidgePlot}
\title{Create ridge plots.}
\usage{
do_RidgePlot(
  sample,
  feature,
  group.by = NULL,
  split.by = NULL,
  assay = "SCT",
  slot = "data",
  continuous_scale = FALSE,
  legend.title = NULL,
  legend.position = NULL,
  legend.width = 1,
  legend.length = 20,
  legend.framewidth = 1.5,
  legend.tickwidth = 1.5,
  legend.framecolor = "grey50",
  legend.tickcolor = "white",
  legend.type = "colorbar",
  colors.use = NULL,
  font.size = 14,
  font.type = "sans",
  rotate_x_axis_labels = FALSE,
  plot.legend = TRUE,
  plot.title = NULL,
  plot.subtitle = NULL,
  plot.caption = NULL,
  xlab = NULL,
  ylab = NULL,
  compute_quantiles = FALSE,
  compute_custom_quantiles = FALSE,
  quantiles = c(0.25, 0.5, 0.75),
  compute_distribution_tails = FALSE,
  prob_tails = 0.025,
  color_by_probabilities = TRUE,
  viridis_direction = -1,
  alpha = 1
)
}
\arguments{
\item{sample}{Your Seurat object.}

\item{feature}{Character. Feature to plot.}

\item{group.by}{Character. Metadata variable to group the values by.}

\item{split.by}{Character. Metadata variable to split the values by.}

\item{assay}{Character. Assay to retrieve data from. Defaults to SCT.}

\item{slot}{Character. Slot from the assay to retrieve data from. Defaults to data.}

\item{legend.title}{Character. Title for the legend.}

\item{legend.position}{Character. Position of the legend in the plot. Will only work if legend is set to TRUE.}

\item{legend.length, legend.width}{Numeric. Length and width of the legend. Will adjust automatically depending on legend side.}

\item{legend.framewidth, legend.tickwidth}{Numeric. Width of the lines of the box in the legend.}

\item{legend.framecolor, legend.tickcolor}{Character. Color of the lines of the box in the legend.}

\item{legend.type}{Character. Type of legend to display. One of: normal, colorbar, colorsteps.}

\item{colors.use}{Character. Named vector of colors to use. Has to match the unique values of group.by or color.by (if used) when scale_type is set to categorical.}

\item{font.size}{Numeric. Overall font size of the plot.}

\item{font.type}{Character. Font family for the plot: sans, mono, serif.}

\item{rotate_x_axis_labels}{Logical. Whether to rotate X axis labels.}

\item{plot.title, plot.subtitle, plot.caption}{Character. Title, Subtitle and caption to use in the plot.}

\item{xlab, ylab}{Character. Titles for the X and Y axis.}

\item{compute_quantiles}{Logical. Whether to compute quantiles of the distribution and color the ridge plots by them.}

\item{compute_custom_quantiles}{Logical. Whether to compute custom quantiles.}

\item{quantiles}{Numeric vector of quantiles.}

\item{compute_distribution_tails}{Logical. Whether to compute distribution tails and color them.}

\item{prob_tails}{Numeric. The accumulated probability that the tails should contain.}

\item{color_by_probabilities}{Logical. Whether to color the ridges depending on the probability.}

\item{viridis_direction}{Numeric. Either 1 or -1. Controls how the gradient of viridis scale is formed.}

\item{alpha}{Numeric. How transparent ridges are.}

\item{continuous}{Logical. Whether we want coloring based on the continuous scale (feature) or categorical scale (groups).}

\item{plot_legend.}{Logical. Whether to plot the legend or not.}

\item{na.value}{Character. Color for NAs.}
}
\value{
A ggplot2 object.
}
\description{
This function computes ridge plots based on the ggridges packages.
}
\examples{
\dontrun{
  # Define list of genes.
  genes <- list("Naive CD4+ T" = c("IL7R", "CCR7"),
                "CD14+ Mono" = c("CD14", "LYZ"),
                "Memory CD4+" = c("S100A4"),
                "B" = c("MS4A1"),
                "CD8+ T" = c("CD8A"),
                "FCGR3A+ Mono" = c("FCGR3A", "MS4A7"),
                "NK" = c("GNLY", "NKG7"),
                "DC" = c("FCER1A", "CST3"),
                "Platelet" = c("PPBP"))

  # Default parameters.
  p <- SCpubr::do_EnrichmentHeatmap(sample = sample,
                                    list_genes = genes)
  p

  # Custom aggregated values.
  p <- SCpubr::do_EnrichmentHeatmap(sample = sample,
                                    list_genes = genes,
                                    group.by = "orig.ident")
  p

  # Transposing the matrix.
  p <- SCpubr::do_EnrichmentHeatmap(sample = sample,
                                    list_genes = genes,
                                    transpose = TRUE)
  p

  # Rotating the labels.
  p <- SCpubr::do_EnrichmentHeatmap(sample = sample,
                                    list_genes = genes,
                                    transpose = TRUE,
                                    column_names_rot = 0)
  p

  # Modifying the tile size.
  p <- SCpubr::do_EnrichmentHeatmap(sample = sample,
                                    list_genes = genes,
                                    transpose = TRUE,
                                    column_names_rot = 0,
                                    cluster_cols = F,
                                    cluster_rows = T,
                                    split.by = "custom_group",
                                    cell_size = 7)
  p


  # Symmetrical scale viriis.
  p <- SCpubr::do_EnrichmentHeatmap(sample = sample,
                                    list_genes = genes,
                                    transpose = TRUE,
                                    column_names_rot = 0,
                                    cluster_cols = F,
                                    cluster_rows = T,
                                    cell_size = 7,
                                    symmetrical_scale = TRUE)
  p


  # Modifying the symmetrical scale non viridis.
  p <- SCpubr::do_EnrichmentHeatmap(sample = sample,
                                    list_genes = genes,
                                    transpose = TRUE,
                                    column_names_rot = 0,
                                    cluster_cols = F,
                                    cluster_rows = T,
                                    cell_size = 7,
                                    symmetrical_scale = TRUE,
                                    use_viridis = FALSE)
  p
}
}
